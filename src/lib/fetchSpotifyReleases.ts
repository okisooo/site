interface SpotifyAlbum {
  id: string;
  name: string;
  images: Array<{ url: string; height: number; width: number }>;
  external_urls: { spotify: string };
  release_date: string;
  album_type: string;
}

interface SpotifyArtistAlbumsResponse {
  items: SpotifyAlbum[];
  total: number;
  next?: string;
}

interface Release {
  title: string;
  year: string;
  img: string;
  link: string;
  releaseDate: string;
  albumType: string;
}

async function getSpotifyAccessToken(): Promise<string> {
  const clientId = process.env.SPOTIFY_CLIENT_ID;
  const clientSecret = process.env.SPOTIFY_CLIENT_SECRET;

  if (!clientId || !clientSecret) {
    throw new Error('Spotify credentials not found in environment variables');
  }

  const response = await fetch('https://accounts.spotify.com/api/token', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/x-www-form-urlencoded',
      'Authorization': `Basic ${Buffer.from(`${clientId}:${clientSecret}`).toString('base64')}`
    },
    body: 'grant_type=client_credentials'
  });

  if (!response.ok) {
    throw new Error(`Failed to get Spotify access token: ${response.statusText}`);
  }

  const data = await response.json();
  return data.access_token;
}

export async function fetchSpotifyReleases(artistId: string = '2FSh9530hmphpeK3QmDSPm'): Promise<Release[]> {
  try {
    const accessToken = await getSpotifyAccessToken();
    let allAlbums: SpotifyAlbum[] = [];
    let nextUrl: string | null = `https://api.spotify.com/v1/artists/${artistId}/albums?include_groups=album,single&market=US&limit=50`;

    // Fetch all albums (handle pagination)
    while (nextUrl) {
      const response = await fetch(nextUrl, {
        headers: {
          'Authorization': `Bearer ${accessToken}`,
        },
      });

      if (!response.ok) {
        throw new Error(`Failed to fetch Spotify data: ${response.statusText}`);
      }

      const data: SpotifyArtistAlbumsResponse = await response.json();
      allAlbums = [...allAlbums, ...data.items];
      nextUrl = data.next || null;
    }

    // Convert Spotify data to our Release format
    const releases: Release[] = allAlbums.map((album) => ({
      title: album.name,
      year: new Date(album.release_date).getFullYear().toString(),
      img: album.images[0]?.url || '', // Use the first (largest) image
      link: album.external_urls.spotify,
      releaseDate: album.release_date,
      albumType: album.album_type,
    }));

    // Sort by release date (newest first)
    releases.sort((a, b) => new Date(b.releaseDate).getTime() - new Date(a.releaseDate).getTime());

    return releases;
  } catch (error) {
    console.error('Error fetching Spotify releases:', error);
    throw error;
  }
}

export async function updateReleasesData(): Promise<void> {
  try {
    const releases = await fetchSpotifyReleases();
    
    // Generate the updated static data
    const releasesDataContent = `// This file is auto-generated by the Spotify API update process
// Last updated: ${new Date().toISOString()}

export interface Release {
  title: string;
  year: string;
  img: string;
  link: string;
  releaseDate: string;
  albumType: string;
}

export const staticReleases: Release[] = ${JSON.stringify(releases, null, 2)};
`;

    // Write to a data file
    const fs = await import('fs/promises');
    const path = await import('path');
    
    const dataFilePath = path.join(process.cwd(), 'src', 'data', 'releases.ts');
    
    // Ensure the data directory exists
    const dataDir = path.dirname(dataFilePath);
    await fs.mkdir(dataDir, { recursive: true });
    
    await fs.writeFile(dataFilePath, releasesDataContent, 'utf-8');
    
    console.log(`Successfully updated releases data with ${releases.length} releases`);
  } catch (error) {
    console.error('Error updating releases data:', error);
    throw error;
  }
}
